"""
This module is mainly auto-generated by Alembic with some slight modifications
to control access to the PostgreSQL database from the ./persistence module.
"""
from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

import os
from backend.persistence.db import Base

# Priority order for database URL:
# 1. Environment variable DATABASE_URL (for CI/testing)
# 2. Imported from config (for production)
# 3. Default fallback

# First, check for environment variable (highest priority for CI)
SQLALCHEMY_DATABASE_URL = os.getenv('DATABASE_URL')

if SQLALCHEMY_DATABASE_URL:
    print(f"Using DATABASE_URL from environment for alembic: {SQLALCHEMY_DATABASE_URL}")
else:
    # Try to import from config as fallback
    try:
        from backend.persistence.db import get_database_url
        SQLALCHEMY_DATABASE_URL = get_database_url()
        # Redact password from database URL for logging
        import re
        safe_url = re.sub(r':([^:@]+)@', ':***@', SQLALCHEMY_DATABASE_URL)
        print(f"Using database URL from config: {safe_url}")
    except Exception as e:
        print(f"Warning: Could not get database URL from config: {e}")
        # Final fallback for CI/testing environments
        SQLALCHEMY_DATABASE_URL = 'postgresql://sysmanage:abc123@localhost:5432/sysmanage'
        print(f"Using hardcoded fallback DATABASE_URL: postgresql://sysmanage:***@localhost:5432/sysmanage")

# Validate URL format
if not SQLALCHEMY_DATABASE_URL or not SQLALCHEMY_DATABASE_URL.startswith(('postgresql://', 'sqlite:///')):
    # Redact password for error logging
    import re
    safe_url = re.sub(r':([^:@]+)@', ':***@', SQLALCHEMY_DATABASE_URL) if SQLALCHEMY_DATABASE_URL else 'None'
    print(f"Error: Invalid database URL format: {safe_url}")
    print(f"Using CI default PostgreSQL URL")
    # Force a known good URL for CI
    SQLALCHEMY_DATABASE_URL = 'postgresql://sysmanage:abc123@localhost:5432/sysmanage'

from backend.persistence.models import User

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Only set the production database URL if no URL is already configured
# This allows tests to override with their own database URL
existing_url = config.get_main_option("sqlalchemy.url")

if not existing_url:
    config.set_main_option("sqlalchemy.url", SQLALCHEMY_DATABASE_URL)
    print(f"Using dynamic database URL for alembic")

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    # Check if a connection is already provided (for tests)
    if hasattr(config, 'attributes') and 'connection' in config.attributes:
        connection = config.attributes['connection']
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()
    else:
        # Normal operation - create engine and connection
        connectable = engine_from_config(
            config.get_section(config.config_ini_section, {}),
            prefix="sqlalchemy.",
            poolclass=pool.NullPool,
        )

        with connectable.connect() as connection:
            context.configure(
                connection=connection, target_metadata=target_metadata
            )

            with context.begin_transaction():
                context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
