"""add_host_roles_table

Revision ID: f02c3958456f
Revises: 8a0423f9a92f
Create Date: 2025-09-28 15:43:04.114408

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from backend.persistence.models.core import GUID


# revision identifiers, used by Alembic.
revision: str = 'f02c3958456f'
down_revision: Union[str, None] = '8a0423f9a92f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('host_roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('host_id', GUID(), nullable=False),
    sa.Column('role', sa.String(length=100), nullable=False),
    sa.Column('package_name', sa.String(length=255), nullable=False),
    sa.Column('package_version', sa.String(length=100), nullable=True),
    sa.Column('service_name', sa.String(length=255), nullable=True),
    sa.Column('service_status', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('detected_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['host_id'], ['host.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )

    # Handle constraint and index modifications using batch mode for SQLite compatibility
    # Only drop constraints/indexes if they exist to avoid KeyError exceptions

    with op.batch_alter_table('diagnostic_report', schema=None) as batch_op:
        try:
            batch_op.drop_constraint(op.f('diagnostic_report_collection_id_key'), type_='unique')
        except ValueError:
            pass  # Constraint doesn't exist, skip
        try:
            batch_op.drop_index(op.f('ix_diagnostic_report_collection_id'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_diagnostic_report_collection_id'), ['collection_id'], unique=True)

    with op.batch_alter_table('password_reset_token', schema=None) as batch_op:
        try:
            batch_op.drop_constraint(op.f('password_reset_token_token_key'), type_='unique')
        except ValueError:
            pass  # Constraint doesn't exist, skip
        try:
            batch_op.drop_index(op.f('ix_password_reset_token_token'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_password_reset_token_token'), ['token'], unique=True)

    with op.batch_alter_table('script_execution_log', schema=None) as batch_op:
        try:
            batch_op.drop_constraint(op.f('script_execution_log_execution_id_key'), type_='unique')
        except ValueError:
            pass  # Constraint doesn't exist, skip
        try:
            batch_op.drop_constraint(op.f('script_execution_log_execution_uuid_key'), type_='unique')
        except ValueError:
            pass  # Constraint doesn't exist, skip
        try:
            batch_op.drop_index(op.f('ix_script_execution_log_execution_id'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_script_execution_log_execution_id'), ['execution_id'], unique=True)
        try:
            batch_op.drop_index(op.f('ix_script_execution_log_execution_uuid'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_script_execution_log_execution_uuid'), ['execution_uuid'], unique=True)

    with op.batch_alter_table('software_installation_log', schema=None) as batch_op:
        try:
            batch_op.drop_constraint(op.f('software_installation_log_installation_id_key'), type_='unique')
        except ValueError:
            pass  # Constraint doesn't exist, skip
        try:
            batch_op.drop_index(op.f('ix_software_installation_log_installation_id'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_software_installation_log_installation_id'), ['installation_id'], unique=True)

    with op.batch_alter_table('tags', schema=None) as batch_op:
        try:
            batch_op.drop_constraint(op.f('tags_name_key'), type_='unique')
        except ValueError:
            pass  # Constraint doesn't exist, skip
        try:
            batch_op.drop_index(op.f('ix_tags_name'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_tags_name'), ['name'], unique=True)

    with op.batch_alter_table('user', schema=None) as batch_op:
        try:
            batch_op.drop_constraint(op.f('user_userid_key'), type_='unique')
        except ValueError:
            pass  # Constraint doesn't exist, skip
        try:
            batch_op.drop_index(op.f('ix_user_userid'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_user_userid'), ['userid'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Handle constraint and index modifications using batch mode for SQLite compatibility
    # Only drop constraints/indexes if they exist to avoid KeyError exceptions

    with op.batch_alter_table('user', schema=None) as batch_op:
        try:
            batch_op.drop_index(op.f('ix_user_userid'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_user_userid'), ['userid'], unique=False)
        batch_op.create_unique_constraint(op.f('user_userid_key'), ['userid'])

    with op.batch_alter_table('tags', schema=None) as batch_op:
        try:
            batch_op.drop_index(op.f('ix_tags_name'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_tags_name'), ['name'], unique=False)
        batch_op.create_unique_constraint(op.f('tags_name_key'), ['name'])

    with op.batch_alter_table('software_installation_log', schema=None) as batch_op:
        try:
            batch_op.drop_index(op.f('ix_software_installation_log_installation_id'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_software_installation_log_installation_id'), ['installation_id'], unique=False)
        batch_op.create_unique_constraint(op.f('software_installation_log_installation_id_key'), ['installation_id'])

    with op.batch_alter_table('script_execution_log', schema=None) as batch_op:
        try:
            batch_op.drop_index(op.f('ix_script_execution_log_execution_uuid'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_script_execution_log_execution_uuid'), ['execution_uuid'], unique=False)
        try:
            batch_op.drop_index(op.f('ix_script_execution_log_execution_id'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_script_execution_log_execution_id'), ['execution_id'], unique=False)
        batch_op.create_unique_constraint(op.f('script_execution_log_execution_uuid_key'), ['execution_uuid'])
        batch_op.create_unique_constraint(op.f('script_execution_log_execution_id_key'), ['execution_id'])

    with op.batch_alter_table('password_reset_token', schema=None) as batch_op:
        try:
            batch_op.drop_index(op.f('ix_password_reset_token_token'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_password_reset_token_token'), ['token'], unique=False)
        batch_op.create_unique_constraint(op.f('password_reset_token_token_key'), ['token'])

    with op.batch_alter_table('diagnostic_report', schema=None) as batch_op:
        try:
            batch_op.drop_index(op.f('ix_diagnostic_report_collection_id'))
        except ValueError:
            pass  # Index doesn't exist, skip
        batch_op.create_index(op.f('ix_diagnostic_report_collection_id'), ['collection_id'], unique=False)
        batch_op.create_unique_constraint(op.f('diagnostic_report_collection_id_key'), ['collection_id'])

    op.drop_table('host_roles')
    # ### end Alembic commands ###
