name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow writing to update README badge
      pull-requests: write  # Allow creating pull requests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: abc123
          POSTGRES_USER: sysmanage
          POSTGRES_DB: sysmanage
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Create test config
      run: |
        sudo mkdir -p /etc
        sudo tee /etc/sysmanage.yaml > /dev/null <<EOF
        api:
          host: "localhost"
          port: 8000
          certFile: ""
          chainFile: ""
          keyFile: ""
        database:
          user: "sysmanage"
          password: "abc123"
          host: "localhost"
          port: 5432
          name: "sysmanage"
        security:
          password_salt: "TEST_fBLqXrh6evnpiDOEA+TtFy1c4ItzVIyyMUsYhCraqLs="
          admin_userid: "admin@sysmanage.org"
          admin_password: "TEST_AdminPass123!"
          jwt_secret: "TEST_SuCHjkous8e0OgHRPxZ1Uayz0NS0b0SGXUXS26MUaZU="
          jwt_algorithm: "HS256"
          jwt_auth_timeout: 6000
          jwt_refresh_timeout: 60000
        webui:
          host: "localhost"
          port: 7443
        EOF

    - name: Run backend database migrations
      run: |
        python -m alembic upgrade head
      env:
        PYTHONPATH: .
        DATABASE_URL: postgresql://sysmanage:abc123@localhost:5432/sysmanage

    - name: Run backend tests
      run: |
        make test-python
      env:
        PYTHONPATH: .
        DATABASE_URL: postgresql://sysmanage:abc123@localhost:5432/sysmanage

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.attrib['line-rate']) * 100
        print(f'{coverage:.0f}')
        ")
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"

        # Determine color based on coverage
        if [ $COVERAGE -ge 90 ]; then
          COLOR="brightgreen"
        elif [ $COVERAGE -ge 80 ]; then
          COLOR="green"
        elif [ $COVERAGE -ge 70 ]; then
          COLOR="yellowgreen"
        elif [ $COVERAGE -ge 60 ]; then
          COLOR="yellow"
        elif [ $COVERAGE -ge 40 ]; then
          COLOR="orange"
        else
          COLOR="red"
        fi
        echo "color=$COLOR" >> $GITHUB_OUTPUT
        echo "Badge color: $COLOR"

    - name: Save backend coverage data
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo '${{ steps.coverage.outputs.percentage }}' > backend-coverage.txt
        echo '${{ steps.coverage.outputs.color }}' > backend-color.txt

    - name: Upload backend coverage data
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-data
        path: |
          backend-coverage.txt
          backend-color.txt

    - name: Checkout repository for backend badge update
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update backend coverage badge
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Update backend coverage badge
        sed -i "s/backend%20test%20coverage-[0-9]*%25-[a-z]*/backend%20test%20coverage-${{ steps.coverage.outputs.percentage }}%25-${{ steps.coverage.outputs.color }}/g" README.md
        # Also fix the broken badge if it exists
        sed -i "s/backend%20test%20coverage-%25-\.svg/backend%20test%20coverage-${{ steps.coverage.outputs.percentage }}%25-${{ steps.coverage.outputs.color }}.svg/g" README.md

    - name: Create PR for backend coverage badge
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Update backend test coverage badge to ${{ steps.coverage.outputs.percentage }}% [skip ci]"
        title: "Update backend coverage badge to ${{ steps.coverage.outputs.percentage }}%"
        body: |
          üîß **Backend Test Coverage Update**

          - **Coverage**: ${{ steps.coverage.outputs.percentage }}%
          - **Badge Color**: ${{ steps.coverage.outputs.color }}

          Generated automatically by CI pipeline.
        branch: update-backend-coverage-badge-${{ github.run_number }}
        delete-branch: true

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: backend
        name: backend-coverage

  lint-backend:
    name: Backend Linting
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint black bandit

    - name: Run Black formatter check
      run: |
        python -m black --check --diff backend/ tests/

    - name: Run Pylint
      run: |
        python -m pylint backend/ --rcfile=.pylintrc --exit-zero

    - name: Run Bandit security scan
      run: |
        python -m bandit -r backend/ -f screen -x backend/tests/
        # Also generate JSON report for artifacts
        python -m bandit -r backend/ -f json -x backend/tests/ -o bandit-report.json || true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.json

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [test-backend, lint-backend]  # Only run after backend tests pass
    permissions:
      contents: write  # Allow writing to update README badge
      pull-requests: write  # Allow creating pull requests

    steps:
    - uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org/'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Create test config for frontend
      run: |
        sudo mkdir -p /etc
        sudo tee /etc/sysmanage.yaml > /dev/null <<EOF
        api:
          host: "localhost"
          port: 8000
          certFile: ""
          chainFile: ""
          keyFile: ""
        database:
          user: "sysmanage"
          password: "abc123"
          host: "localhost"
          port: 5432
          name: "sysmanage"
        security:
          password_salt: "TEST_fBLqXrh6evnpiDOEA+TtFy1c4ItzVIyyMUsYhCraqLs="
          admin_userid: "admin@sysmanage.org"
          admin_password: "TEST_AdminPass123!"
          jwt_secret: "TEST_SuCHjkous8e0OgHRPxZ1Uayz0NS0b0SGXUXS26MUaZU="
          jwt_algorithm: "HS256"
          jwt_auth_timeout: 6000
          jwt_refresh_timeout: 60000
        webui:
          host: "localhost"
          port: 7443
        EOF

    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm cache clean --force || true
        npm install --legacy-peer-deps || npm ci --legacy-peer-deps

    - name: Run security audit
      working-directory: frontend
      run: |
        # Run audit and save results
        npm audit --audit-level=high --json > npm-audit-ci.json || true
        npm audit --audit-level=high || true
    
    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-ci-report
        path: frontend/npm-audit-ci.json

    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint

    - name: Run frontend tests with coverage
      working-directory: frontend
      run: |
        make test-vite

    - name: Debug coverage files
      working-directory: frontend
      run: |
        echo "üîç Debugging coverage file structure:"
        echo "Current directory: $(pwd)"
        echo "Coverage directory exists: $(test -d coverage && echo 'YES' || echo 'NO')"
        if [ -d coverage ]; then
          echo "Coverage directory contents:"
          ls -la coverage/ || echo "Failed to list coverage directory"
          echo "Looking for specific files:"
          echo "coverage-summary.json exists: $(test -f coverage/coverage-summary.json && echo 'YES' || echo 'NO')"
          echo "index.html exists: $(test -f coverage/index.html && echo 'YES' || echo 'NO')"
          echo "src/mocks directory exists: $(test -d coverage/src/mocks && echo 'YES' || echo 'NO')"
          if [ -d coverage/src ]; then
            echo "Coverage src subdirectories:"
            ls -la coverage/src/
          fi
        fi

    - name: Extract frontend coverage percentage
      id: frontend-coverage
      working-directory: frontend
      run: |
        # Extract coverage from JSON report (more reliable than parsing text output)
        if [ -f "coverage/coverage-summary.json" ]; then
          COVERAGE=$(python3 -c 'import json; f=open("coverage/coverage-summary.json"); data=json.load(f); print(int(data["total"]["lines"]["pct"]))')
        else
          echo "No coverage report found, using 0"
          COVERAGE=0
        fi

        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Frontend Coverage: $COVERAGE%"

        # Determine color based on coverage
        if [ $COVERAGE -ge 90 ]; then
          COLOR="brightgreen"
        elif [ $COVERAGE -ge 80 ]; then
          COLOR="green"
        elif [ $COVERAGE -ge 70 ]; then
          COLOR="yellowgreen"
        elif [ $COVERAGE -ge 60 ]; then
          COLOR="yellow"
        elif [ $COVERAGE -ge 40 ]; then
          COLOR="orange"
        else
          COLOR="red"
        fi
        echo "color=$COLOR" >> $GITHUB_OUTPUT
        echo "Frontend Badge color: $COLOR"

    - name: Checkout repository for frontend badge update
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update frontend coverage badge
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Update frontend coverage badge
        sed -i "s/frontend%20test%20coverage-[0-9]*%25-[a-z]*/frontend%20test%20coverage-${{ steps.frontend-coverage.outputs.percentage }}%25-${{ steps.frontend-coverage.outputs.color }}/g" README.md
        # Also fix the broken badge if it exists
        sed -i "s/frontend%20test%20coverage-%25-\.svg/frontend%20test%20coverage-${{ steps.frontend-coverage.outputs.percentage }}%25-${{ steps.frontend-coverage.outputs.color }}.svg/g" README.md

    - name: Create PR for frontend coverage badge
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Update frontend test coverage badge to ${{ steps.frontend-coverage.outputs.percentage }}% [skip ci]"
        title: "Update frontend coverage badge to ${{ steps.frontend-coverage.outputs.percentage }}%"
        body: |
          üîß **Frontend Test Coverage Update**

          - **Coverage**: ${{ steps.frontend-coverage.outputs.percentage }}%
          - **Badge Color**: ${{ steps.frontend-coverage.outputs.color }}

          Generated automatically by CI pipeline.
        branch: update-frontend-coverage-badge-${{ github.run_number }}
        delete-branch: true

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

    - name: Check if coverage exists before upload
      working-directory: frontend
      run: |
        echo "üîç Final coverage check before artifact upload:"
        if [ -d "coverage" ]; then
          echo "‚úÖ Coverage directory exists"
          echo "Files in coverage directory:"
          find coverage -type f | head -10
          echo "Coverage directory size: $(du -sh coverage/ | cut -f1)"
          echo "COVERAGE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "‚ùå No coverage directory found for artifacts"
          echo "COVERAGE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Upload MSW test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: msw-test-coverage-${{ github.run_number }}
        path: frontend/coverage/
        if-no-files-found: warn
        retention-days: 7

    - name: Report artifact upload status
      if: always()
      run: |
        if [ "${{ env.COVERAGE_EXISTS }}" = "true" ]; then
          echo "‚úÖ Coverage files should have been uploaded as artifacts"
        else
          echo "‚ùå No coverage files found - check test execution above"
        fi

  build:
    name: Build Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [test-frontend]  # Only run after frontend tests pass

    steps:
    - uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org/'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Create test config for build
      run: |
        sudo mkdir -p /etc
        sudo tee /etc/sysmanage.yaml > /dev/null <<EOF
        api:
          host: "localhost"
          port: 8000
          certFile: ""
          chainFile: ""
          keyFile: ""
        database:
          user: "sysmanage"
          password: "abc123"
          host: "localhost"
          port: 5432
          name: "sysmanage"
        security:
          password_salt: "TEST_fBLqXrh6evnpiDOEA+TtFy1c4ItzVIyyMUsYhCraqLs="
          admin_userid: "admin@sysmanage.org"
          admin_password: "TEST_AdminPass123!"
          jwt_secret: "TEST_SuCHjkous8e0OgHRPxZ1Uayz0NS0b0SGXUXS26MUaZU="
          jwt_algorithm: "HS256"
          jwt_auth_timeout: 6000
          jwt_refresh_timeout: 60000
        webui:
          host: "localhost"
          port: 7443
        EOF

    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm cache clean --force || true
        npm install --legacy-peer-deps || npm ci --legacy-peer-deps

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [build]  # Only run after build succeeds
    # Only run if all previous tests passed
    if: success()

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: sysmanage
          POSTGRES_USER: sysmanage
          POSTGRES_PASSWORD: abc123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org/'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm cache clean --force || true
        npm install --legacy-peer-deps || npm ci --legacy-peer-deps

    - name: Install Playwright browsers
      run: |
        python -m playwright install --with-deps chromium firefox
        sudo apt-get update
        sudo apt-get install -y libnss3 libatk-bridge2.0-0 libdrm2 libxkbcommon0 libgtk-3-0

    - name: Create test config
      run: |
        sudo mkdir -p /etc
        sudo tee /etc/sysmanage.yaml > /dev/null <<EOF
        api:
          host: "0.0.0.0"
          port: 8080
          certFile: ""
          chainFile: ""
          keyFile: ""
        database:
          user: "sysmanage"
          password: "abc123"
          host: "localhost"
          port: 5432
          name: "sysmanage"
        security:
          password_salt: "TEST_fBLqXrh6evnpiDOEA+TtFy1c4ItzVIyyMUsYhCraqLs="
          admin_userid: "admin@sysmanage.org"
          admin_password: "TEST_AdminPass123!"
          jwt_secret: "TEST_SuCHjkous8e0OgHRPxZ1Uayz0NS0b0SGXUXS26MUaZU="
          jwt_algorithm: "HS256"
          jwt_auth_timeout: 6000
          jwt_refresh_timeout: 60000
        webui:
          host: "0.0.0.0"
          port: 3000
        vault:
          enabled: false
        EOF

    - name: Run backend database migrations
      run: |
        python -m alembic upgrade head
      env:
        PYTHONPATH: .
        DATABASE_URL: postgresql://sysmanage:abc123@localhost:5432/sysmanage

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Start backend server
      run: |
        cd backend
        python -m uvicorn main:app --host 0.0.0.0 --port 8080 &
        echo $! > /tmp/backend.pid
        sleep 10
      env:
        PYTHONPATH: .

    - name: Start frontend server
      working-directory: frontend
      run: |
        npx serve -s build -l 3000 &
        echo $! > /tmp/frontend.pid
        sleep 5

    - name: Wait for servers to be ready
      run: |
        echo "Waiting for backend health check..."
        timeout 60 bash -c 'until curl -f http://localhost:8080/api/health; do echo "Waiting for backend..."; sleep 2; done'
        echo "‚úÖ Backend is ready"

        echo "Waiting for frontend..."
        timeout 60 bash -c 'until curl -f http://localhost:3000/; do echo "Waiting for frontend..."; sleep 2; done'
        echo "‚úÖ Frontend is ready"

    - name: Run Playwright UI tests
      id: ui-tests
      run: |
        echo "üé≠ Running Playwright UI tests..."
        if make test-playwright; then
          echo "status=passing" >> $GITHUB_OUTPUT
          echo "color=brightgreen" >> $GITHUB_OUTPUT
          echo "‚úÖ All UI tests passed"
        else
          echo "status=failing" >> $GITHUB_OUTPUT
          echo "color=red" >> $GITHUB_OUTPUT
          echo "‚ùå UI tests failed"
          exit 1
        fi
      env:
        CI: true

    - name: Upload UI test artifacts on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ui-test-results-${{ github.run_number }}
        path: |
          /tmp/claude/login_failure_*.png
          tests/ui/test-results/
        retention-days: 7

    - name: Save UI test status data
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo '${{ steps.ui-tests.outputs.status }}' > ui-test-status.txt
        echo '${{ steps.ui-tests.outputs.color }}' > ui-test-color.txt

    - name: Upload UI test status data
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: ui-test-status-data
        path: |
          ui-test-status.txt
          ui-test-color.txt

    - name: Checkout repository for UI badge update
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update UI tests badge
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Update UI tests badge
        sed -i "s/ui%20tests-[a-z]*-[a-z]*/ui%20tests-${{ steps.ui-tests.outputs.status }}-${{ steps.ui-tests.outputs.color }}/g" README.md
        # Also fix the broken badge if it exists
        sed -i "s/ui%20tests--\.svg/ui%20tests-${{ steps.ui-tests.outputs.status }}-${{ steps.ui-tests.outputs.color }}.svg/g" README.md

    - name: Create PR for UI tests badge
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Update UI tests badge to ${{ steps.ui-tests.outputs.status }} [skip ci]"
        title: "Update UI tests badge to ${{ steps.ui-tests.outputs.status }}"
        body: |
          üé≠ **UI Tests Status Update**

          - **Status**: ${{ steps.ui-tests.outputs.status }}
          - **Badge Color**: ${{ steps.ui-tests.outputs.color }}

          Generated automatically by CI pipeline.
        branch: update-ui-tests-badge-${{ github.run_number }}
        delete-branch: true

    - name: Stop servers
      if: always()
      run: |
        echo "üõë Stopping servers..."
        if [ -f /tmp/backend.pid ]; then
          kill $(cat /tmp/backend.pid) || true
        fi
        if [ -f /tmp/frontend.pid ]; then
          kill $(cat /tmp/frontend.pid) || true
        fi
        pkill -f "uvicorn" || true
        pkill -f "serve" || true