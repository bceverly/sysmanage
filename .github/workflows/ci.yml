name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow writing to update README badge
      pull-requests: write  # Allow creating pull requests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: abc123
          POSTGRES_USER: sysmanage
          POSTGRES_DB: sysmanage
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Create test config
      run: |
        sudo mkdir -p /etc
        sudo tee /etc/sysmanage.yaml > /dev/null <<EOF
        api:
          host: "localhost"
          port: 8000
          certFile: ""
          chainFile: ""
          keyFile: ""
        database:
          user: "sysmanage"
          password: "abc123"
          host: "localhost"
          port: 5432
          name: "sysmanage"
        security:
          password_salt: "TEST_fBLqXrh6evnpiDOEA+TtFy1c4ItzVIyyMUsYhCraqLs="
          admin_userid: "admin@sysmanage.org"
          admin_password: "TEST_AdminPass123!"
          jwt_secret: "TEST_SuCHjkous8e0OgHRPxZ1Uayz0NS0b0SGXUXS26MUaZU="
          jwt_algorithm: "HS256"
          jwt_auth_timeout: 6000
          jwt_refresh_timeout: 60000
        webui:
          host: "localhost"
          port: 7443
        EOF

    - name: Run backend database migrations
      run: |
        python -m alembic upgrade head
      env:
        PYTHONPATH: .
        DATABASE_URL: postgresql://sysmanage:abc123@localhost:5432/sysmanage

    - name: Run backend tests
      run: |
        python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: .
        DATABASE_URL: postgresql://sysmanage:abc123@localhost:5432/sysmanage

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.attrib['line-rate']) * 100
        print(f'{coverage:.0f}')
        ")
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"

        # Determine color based on coverage
        if [ $COVERAGE -ge 90 ]; then
          COLOR="brightgreen"
        elif [ $COVERAGE -ge 80 ]; then
          COLOR="green"
        elif [ $COVERAGE -ge 70 ]; then
          COLOR="yellowgreen"
        elif [ $COVERAGE -ge 60 ]; then
          COLOR="yellow"
        elif [ $COVERAGE -ge 40 ]; then
          COLOR="orange"
        else
          COLOR="red"
        fi
        echo "color=$COLOR" >> $GITHUB_OUTPUT
        echo "Badge color: $COLOR"

    - name: Save backend coverage data
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo '${{ steps.coverage.outputs.percentage }}' > backend-coverage.txt
        echo '${{ steps.coverage.outputs.color }}' > backend-color.txt

    - name: Upload backend coverage data
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-data
        path: |
          backend-coverage.txt
          backend-color.txt

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: backend
        name: backend-coverage

  lint-backend:
    name: Backend Linting
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint black bandit

    - name: Run Black formatter check
      run: |
        python -m black --check --diff backend/ tests/

    - name: Run Pylint
      run: |
        python -m pylint backend/ --rcfile=.pylintrc --exit-zero

    - name: Run Bandit security scan
      run: |
        python -m bandit -r backend/ -f screen -x backend/tests/
        # Also generate JSON report for artifacts
        python -m bandit -r backend/ -f json -x backend/tests/ -o bandit-report.json || true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.json

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow writing to update README badge
      pull-requests: write  # Allow creating pull requests
    
    steps:
    - uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org/'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm cache clean --force || true
        npm install --legacy-peer-deps || npm ci --legacy-peer-deps

    - name: Run security audit
      working-directory: frontend
      run: |
        # Run audit and save results
        npm audit --audit-level=high --json > npm-audit-ci.json || true
        npm audit --audit-level=high || true
    
    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-ci-report
        path: frontend/npm-audit-ci.json

    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint

    - name: Run frontend tests with coverage
      working-directory: frontend
      run: npm run test:coverage

    - name: Extract frontend coverage percentage
      id: frontend-coverage
      working-directory: frontend
      run: |
        # Extract coverage from vitest coverage report (% Stmts is in column 2)
        COVERAGE=$(npm run test:coverage 2>&1 | grep "All files" | awk '{print $2}' | sed 's/%//' || echo "0")
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Frontend Coverage: $COVERAGE%"

        # Determine color based on coverage
        if [ $(echo "$COVERAGE >= 90" | bc -l) -eq 1 ]; then
          COLOR="brightgreen"
        elif [ $(echo "$COVERAGE >= 80" | bc -l) -eq 1 ]; then
          COLOR="green"
        elif [ $(echo "$COVERAGE >= 70" | bc -l) -eq 1 ]; then
          COLOR="yellowgreen"
        elif [ $(echo "$COVERAGE >= 60" | bc -l) -eq 1 ]; then
          COLOR="yellow"
        elif [ $(echo "$COVERAGE >= 40" | bc -l) -eq 1 ]; then
          COLOR="orange"
        else
          COLOR="red"
        fi
        echo "color=$COLOR" >> $GITHUB_OUTPUT
        echo "Frontend Badge color: $COLOR"

    - name: Save frontend coverage data
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo '${{ steps.frontend-coverage.outputs.percentage }}' > frontend-coverage.txt
        echo '${{ steps.frontend-coverage.outputs.color }}' > frontend-color.txt

    - name: Upload frontend coverage data
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage-data
        path: |
          frontend-coverage.txt
          frontend-color.txt

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

  build:
    name: Build Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [test-backend, lint-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org/'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm cache clean --force || true
        npm install --legacy-peer-deps || npm ci --legacy-peer-deps

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/