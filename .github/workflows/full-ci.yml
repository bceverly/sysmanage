name: Full CI Pipeline (with UI Tests)

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      run_ui_tests:
        description: 'Run UI tests (increases CI time)'
        required: false
        default: 'true'
        type: boolean

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: abc123
          POSTGRES_USER: sysmanage
          POSTGRES_DB: sysmanage
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test config
      run: |
        sudo mkdir -p /etc
        sudo tee /etc/sysmanage.yaml > /dev/null <<EOF
        api:
          host: "localhost"
          port: 8000
        database:
          user: "sysmanage"
          password: "abc123"
          host: "localhost"
          port: 5432
          name: "sysmanage"
        security:
          password_salt: "TEST_fBLqXrh6evnpiDOEA+TtFy1c4ItzVIyyMUsYhCraqLs="
          jwt_secret: "TEST_SuCHjkous8e0OgHRPxZ1Uayz0NS0b0SGXUXS26MUaZU="
          jwt_algorithm: "HS256"
          jwt_auth_timeout: 6000
          jwt_refresh_timeout: 60000
        EOF

    - name: Run backend database migrations
      run: python -c "from alembic.config import Config; from alembic import command; cfg = Config('alembic.ini'); command.upgrade(cfg, 'head')"
      env:
        PYTHONPATH: .

    - name: Run backend tests
      run: make test-python
      env:
        PYTHONPATH: .

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci --legacy-peer-deps

    - name: Run frontend tests
      working-directory: frontend
      run: make test-vite

  ui-tests:
    name: UI Tests (Optional)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_ui_tests == 'true' }}
    needs: [test-backend, test-frontend]
    permissions:
      contents: read

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: sysmanage
          POSTGRES_USER: sysmanage
          POSTGRES_PASSWORD: abc123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd frontend && npm ci --legacy-peer-deps

    - name: Install Playwright
      run: python -m playwright install --with-deps chromium firefox

    - name: Create test config
      run: |
        sudo mkdir -p /etc
        sudo tee /etc/sysmanage.yaml > /dev/null <<EOF
        api:
          host: "0.0.0.0"
          port: 8080
        database:
          user: "sysmanage"
          password: "abc123"
          host: "localhost"
          port: 5432
          name: "sysmanage"
        security:
          password_salt: "TEST_fBLqXrh6evnpiDOEA+TtFy1c4ItzVIyyMUsYhCraqLs="
          jwt_secret: "TEST_SuCHjkous8e0OgHRPxZ1Uayz0NS0b0SGXUXS26MUaZU="
          jwt_algorithm: "HS256"
          jwt_auth_timeout: 6000
          jwt_refresh_timeout: 60000
        webui:
          host: "0.0.0.0"
          port: 3000
        vault:
          enabled: false
        EOF

    - name: Set up database and start servers
      run: |
        # Set up database
        python -c "from alembic.config import Config; from alembic import command; cfg = Config('alembic.ini'); command.upgrade(cfg, 'head')"

        # Start backend
        cd backend && python -m uvicorn main:app --host 0.0.0.0 --port 8080 &

        # Build and start frontend
        cd frontend && npm run build && npx serve -s build -l 3000 &

        # Wait for servers
        sleep 15
        timeout 60 bash -c 'until curl -f http://localhost:8080/api/health; do sleep 1; done'
        timeout 60 bash -c 'until curl -f http://localhost:3000/; do sleep 1; done'
      env:
        PYTHONPATH: .

    - name: Run UI tests
      run: make test-playwright

    - name: Upload UI test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ui-test-results
        path: /tmp/claude/login_failure_*.png

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    # Only require UI tests if they were requested AND they didn't fail
    if: always() && (needs.test-backend.result == 'success' && needs.test-frontend.result == 'success')
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install and build
      working-directory: frontend
      run: |
        npm ci --legacy-peer-deps
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: frontend/dist/