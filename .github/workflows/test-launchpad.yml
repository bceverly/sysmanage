name: Test Launchpad PPA Upload

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Ubuntu release to build for'
        required: true
        type: choice
        options:
          - noble
          - jammy
          - plucky
          - oracular
        default: 'noble'

permissions:
  contents: read

jobs:
  test-launchpad-upload:
    name: Test PPA Upload (Ubuntu ${{ inputs.release }})
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          VERSION="${LATEST_TAG#v}"
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG (version: $VERSION)"

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            devscripts \
            debhelper \
            dh-python \
            python3-all \
            python3-setuptools \
            dput-ng \
            gnupg

      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.LAUNCHPAD_GPG_KEY }}
          GPG_PASSPHRASE: ${{ secrets.LAUNCHPAD_GPG_PASSPHRASE }}
        run: |
          # Check if GPG key secret is set
          if [ -z "$GPG_PRIVATE_KEY" ]; then
            echo "ERROR: LAUNCHPAD_GPG_KEY secret is not set!"
            echo "Please add the following secrets to your repository:"
            echo "  - LAUNCHPAD_GPG_KEY (your GPG private key)"
            echo "  - LAUNCHPAD_GPG_PASSPHRASE (your GPG key passphrase)"
            exit 1
          fi

          # Create GPG directory if it doesn't exist
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # Import the GPG key
          echo "Importing GPG key..."
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import 2>&1 || \
            echo "$GPG_PRIVATE_KEY" | base64 -d | gpg --batch --import 2>&1

          # Configure GPG for non-interactive use
          cat >> ~/.gnupg/gpg.conf << EOF
          use-agent
          pinentry-mode loopback
          EOF

          cat >> ~/.gnupg/gpg-agent.conf << EOF
          allow-loopback-pinentry
          allow-preset-passphrase
          EOF

          # Restart GPG agent
          gpg-connect-agent reloadagent /bye

          # List imported keys
          echo "Imported GPG keys:"
          gpg --list-secret-keys --keyid-format LONG

          # Get the key ID for later use
          GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2 | head -1)
          echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
          echo "Using GPG key: $GPG_KEY_ID"

      - name: Configure dput for Launchpad
        run: |
          mkdir -p ~/.dput.d/profiles
          cat > ~/.dput.d/profiles/launchpad.json << 'EOF'
          {
            "fqdn": "ppa.launchpad.net",
            "incoming": "~bceverly/ubuntu/sysmanage",
            "method": "ftp",
            "allow_unsigned_uploads": false
          }
          EOF

          echo "Configured dput for PPA: ~bceverly/ubuntu/sysmanage"

      - name: Generate requirements-prod.txt
        run: |
          echo "Generating requirements-prod.txt from requirements.txt..."
          python3 scripts/update-requirements-prod.py

      - name: Build frontend
        working-directory: frontend
        run: |
          echo "Installing frontend dependencies..."
          npm ci --legacy-peer-deps

          echo "Building frontend..."
          npm run build

          echo "Frontend build complete"
          ls -lh build/ | head -10

      - name: Build and upload source package
        env:
          VERSION: ${{ steps.get_tag.outputs.version }}
          DEBFULLNAME: "Bryan Everly"
          DEBEMAIL: "bryan@theeverlys.com"
          RELEASE: ${{ inputs.release }}
        run: |
          # Get GPG key ID
          GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2 | head -1)

          echo "=========================================="
          echo "Building source package for Ubuntu $RELEASE"
          echo "Version: $VERSION"
          echo "Tag: ${{ steps.get_tag.outputs.tag }}"
          echo "=========================================="

          # Create working directory
          WORK_DIR="/tmp/sysmanage-$RELEASE"
          rm -rf "$WORK_DIR"
          mkdir -p "$WORK_DIR"

          # Copy source to working directory
          echo "Copying source files..."
          cp -r . "$WORK_DIR/"
          cd "$WORK_DIR"

          # Copy debian directory
          if [ -d "installer/ubuntu/debian" ]; then
            cp -r installer/ubuntu/debian .
          else
            echo "Error: debian directory not found at installer/ubuntu/debian"
            exit 1
          fi

          # Update changelog with proper version
          echo "Updating changelog..."
          dch -v "${VERSION}+ppa1~${RELEASE}1" -D "$RELEASE" "New upstream release ${VERSION}"

          echo "Changelog entry:"
          head -10 debian/changelog

          # Build source package (unsigned)
          # Use -d to skip build dependency checking (Launchpad will handle dependencies)
          echo "Building source package..."
          debuild -S -sa -us -uc -d

          # Move to /tmp where files are
          cd ..

          echo "Generated files:"
          ls -lh sysmanage_${VERSION}+ppa1~${RELEASE}1*

          # Create a temporary passphrase file for GPG
          echo "${{ secrets.LAUNCHPAD_GPG_PASSPHRASE }}" > /tmp/gpg-passphrase-${RELEASE}

          # Sign with passphrase from file
          echo "Signing source package..."
          debsign --re-sign -p"gpg --batch --yes --passphrase-file /tmp/gpg-passphrase-${RELEASE}" \
            -k"$GPG_KEY_ID" sysmanage_${VERSION}+ppa1~${RELEASE}1_source.changes

          # Clean up passphrase file
          rm -f /tmp/gpg-passphrase-${RELEASE}

          echo "Signed files:"
          ls -lh sysmanage_${VERSION}+ppa1~${RELEASE}1_source.changes

          # Upload to Launchpad PPA
          echo "Uploading to Launchpad PPA..."
          dput launchpad "sysmanage_${VERSION}+ppa1~${RELEASE}1_source.changes"

          echo ""
          echo "=========================================="
          echo "SUCCESS! Uploaded to Launchpad PPA"
          echo "=========================================="
          echo "PPA: ~bceverly/ubuntu/sysmanage"
          echo "Version: ${VERSION}+ppa1~${RELEASE}1"
          echo "Release: $RELEASE"
          echo ""
          echo "Check build status at:"
          echo "https://launchpad.net/~bceverly/+archive/ubuntu/sysmanage/+packages"
          echo "=========================================="
