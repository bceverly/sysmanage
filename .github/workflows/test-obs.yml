name: Test OBS Deployment

on:
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Version to deploy (optional - uses latest tag if not specified)'
        required: false
        type: string

permissions:
  contents: read

jobs:
  test-obs-deploy:
    name: Test OBS Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ inputs.version_override }}" ]; then
            VERSION="${{ inputs.version_override }}"
            echo "Using manual version: $VERSION"
          else
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
            VERSION="${LATEST_TAG#v}"
            echo "Using latest tag: $LATEST_TAG (version: $VERSION)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version $VERSION to OBS"

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Install OBS tools
        run: |
          sudo apt-get update
          sudo apt-get install -y osc

      - name: Configure OBS credentials
        env:
          OBS_USERNAME: ${{ secrets.OBS_USERNAME }}
          OBS_PASSWORD: ${{ secrets.OBS_PASSWORD }}
        run: |
          if [ -z "$OBS_USERNAME" ] || [ -z "$OBS_PASSWORD" ]; then
            echo "ERROR: OBS credentials not set!"
            echo "Please set the following secrets:"
            echo "  - OBS_USERNAME (your openSUSE Build Service username)"
            echo "  - OBS_PASSWORD (your openSUSE Build Service password)"
            exit 1
          fi

          mkdir -p ~/.config/osc
          cat > ~/.config/osc/oscrc << EOF
          [general]
          apiurl = https://api.opensuse.org

          [https://api.opensuse.org]
          user = $OBS_USERNAME
          pass = $OBS_PASSWORD
          EOF
          chmod 600 ~/.config/osc/oscrc

          echo "OBS credentials configured for user: $OBS_USERNAME"

      - name: Checkout OBS package
        env:
          OBS_USERNAME: ${{ secrets.OBS_USERNAME }}
        run: |
          echo "Checking out OBS package home:${OBS_USERNAME}/sysmanage"
          osc checkout home:${OBS_USERNAME}/sysmanage
          cd home:${OBS_USERNAME}/sysmanage
          echo "Current OBS package contents:"
          ls -la

      - name: Generate requirements-prod.txt
        run: |
          echo "Generating requirements-prod.txt from requirements.txt..."
          python3 scripts/update-requirements-prod.py

      - name: Build frontend
        working-directory: frontend
        run: |
          echo "Installing frontend dependencies..."
          npm ci --legacy-peer-deps

          echo "Building frontend..."
          npm run build

          echo "Frontend build complete"
          ls -lh dist/ | head -10

      - name: Verify frontend build
        run: |
          if [ ! -d "frontend/dist" ]; then
            echo "ERROR: frontend/dist directory does not exist!"
            echo "Checking frontend directory contents:"
            ls -la frontend/
            exit 1
          fi
          echo "Frontend build directory verified"
          echo "Build directory size: $(du -sh frontend/dist)"

      - name: Update package files
        env:
          VERSION: ${{ steps.version.outputs.version }}
          OBS_USERNAME: ${{ secrets.OBS_USERNAME }}
          WORKSPACE: ${{ github.workspace }}
        run: |
          cd home:${OBS_USERNAME}/sysmanage

          # Copy spec file and rpmlintrc (if it exists)
          echo "Copying spec file from installer/opensuse/"
          cp $WORKSPACE/installer/opensuse/sysmanage.spec .
          if [ -f $WORKSPACE/installer/opensuse/sysmanage-rpmlintrc ]; then
            echo "Copying rpmlintrc"
            cp $WORKSPACE/installer/opensuse/sysmanage-rpmlintrc .
          fi

          # Update version in spec file
          echo "Updating version to $VERSION in spec file"
          sed -i "s/^Version:.*/Version:        $VERSION/" sysmanage.spec

          # Create source tarball (OBS needs the source)
          echo "Creating source tarball..."
          TAR_NAME="sysmanage-$VERSION"
          mkdir -p /tmp/$TAR_NAME

          # Copy backend source files
          echo "Copying backend source files..."
          cp -r $WORKSPACE/backend /tmp/$TAR_NAME/
          cp -r $WORKSPACE/alembic /tmp/$TAR_NAME/
          cp $WORKSPACE/alembic.ini /tmp/$TAR_NAME/
          cp -r $WORKSPACE/config /tmp/$TAR_NAME/
          cp -r $WORKSPACE/scripts /tmp/$TAR_NAME/
          cp $WORKSPACE/requirements.txt /tmp/$TAR_NAME/
          cp $WORKSPACE/requirements-prod.txt /tmp/$TAR_NAME/
          cp $WORKSPACE/README.md /tmp/$TAR_NAME/ || touch /tmp/$TAR_NAME/README.md
          cp $WORKSPACE/LICENSE /tmp/$TAR_NAME/ || touch /tmp/$TAR_NAME/LICENSE

          # Copy frontend build
          echo "Copying frontend build..."
          mkdir -p /tmp/$TAR_NAME/frontend
          cp -r $WORKSPACE/frontend/dist /tmp/$TAR_NAME/frontend/
          cp -r $WORKSPACE/frontend/public /tmp/$TAR_NAME/frontend/
          cp $WORKSPACE/frontend/package.json /tmp/$TAR_NAME/frontend/ || true

          # Copy installer files
          echo "Copying installer files..."
          mkdir -p /tmp/$TAR_NAME/installer/opensuse
          cp $WORKSPACE/installer/opensuse/*.service /tmp/$TAR_NAME/installer/opensuse/ || true
          cp $WORKSPACE/installer/opensuse/*.sudoers /tmp/$TAR_NAME/installer/opensuse/ || true
          cp $WORKSPACE/installer/opensuse/*.example /tmp/$TAR_NAME/installer/opensuse/ || true
          cp $WORKSPACE/installer/opensuse/sysmanage-nginx.conf /tmp/$TAR_NAME/installer/opensuse/ || true

          # Create tarball
          cd /tmp
          tar czf sysmanage-$VERSION.tar.gz $TAR_NAME/
          echo "Created tarball: sysmanage-$VERSION.tar.gz ($(du -h sysmanage-$VERSION.tar.gz | cut -f1))"
          echo "Tarball contents:"
          tar tzf sysmanage-$VERSION.tar.gz | head -20

          # Create vendor tarball for offline installation
          echo "Creating vendor tarball with pip dependencies..."
          mkdir -p /tmp/vendor

          # Download ALL dependencies (with transitive deps)
          # This will get wheels when available and source distributions when not
          # Using current Python version (3.12) which is compatible with target Python 3.11
          pip3 download -r $WORKSPACE/requirements-prod.txt -d /tmp/vendor

          cd /tmp
          tar czf sysmanage-vendor-$VERSION.tar.gz vendor/
          echo "Created vendor tarball: sysmanage-vendor-$VERSION.tar.gz ($(du -h sysmanage-vendor-$VERSION.tar.gz | cut -f1))"
          echo "Vendor tarball contains $(ls -1 /tmp/vendor/*.whl 2>/dev/null | wc -l) wheels and $(ls -1 /tmp/vendor/*.tar.gz 2>/dev/null | wc -l) source packages"

          # Copy both tarballs to OBS directory
          cp sysmanage-$VERSION.tar.gz $GITHUB_WORKSPACE/home:${OBS_USERNAME}/sysmanage/
          cp sysmanage-vendor-$VERSION.tar.gz $GITHUB_WORKSPACE/home:${OBS_USERNAME}/sysmanage/

          cd $GITHUB_WORKSPACE/home:${OBS_USERNAME}/sysmanage

          echo "OBS package directory contents:"
          ls -lh

          # Remove old tarballs (keep spec and rpmlintrc)
          echo "Removing old tarballs..."
          osc remove *.tar.gz 2>/dev/null || true

          # Add new files
          echo "Adding new files to OBS..."
          osc add sysmanage-$VERSION.tar.gz
          osc add sysmanage-vendor-$VERSION.tar.gz
          osc add sysmanage.spec
          if [ -f sysmanage-rpmlintrc ]; then
            osc add sysmanage-rpmlintrc
          fi

          echo "Files staged for OBS:"
          osc status

      - name: Commit and push to OBS
        env:
          VERSION: ${{ steps.version.outputs.version }}
          OBS_USERNAME: ${{ secrets.OBS_USERNAME }}
        run: |
          cd home:${OBS_USERNAME}/sysmanage

          echo "Committing to OBS..."
          osc commit -m "Release version $VERSION"

          echo ""
          echo "=========================================="
          echo "SUCCESS! Uploaded version $VERSION to OBS"
          echo "=========================================="
          echo ""
          echo "View build status at:"
          echo "https://build.opensuse.org/package/show/home:${OBS_USERNAME}/sysmanage"
          echo ""
          echo "OBS will now build for all configured targets:"
          echo "  - openSUSE Tumbleweed"
          echo "  - openSUSE Leap 15.6"
          echo "  - openSUSE Leap 15.5"
          echo "  - SLE 15 SP6"
          echo "  - SLE 15 SP5"
          echo "=========================================="
